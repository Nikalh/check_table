# -*- coding: utf-8 -*-
import asyncio
import os
import datetime
import sys
import html

print("üöÄ Starting Telegram Excel Bot on PythonAnywhere...")

# –ò–º–ø–æ—Ä—Ç—ã
import pandas as pd
from openpyxl import load_workbook
import requests  # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –≤–º–µ—Å—Ç–æ aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# –î–ª—è Render - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
from aiohttp import web
import threading

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    print("‚ùå TELEGRAM_TOKEN not found!")
    sys.exit(1)

print("‚úÖ Telegram token loaded successfully")

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
user_data = {}

# --- –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
def escape_md(text):
    if not text:
        return ""
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in str(text))

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –¥–∞—Ç–µ ---
def parse_date(val):
    if val is None:
        return None
    try:
        return pd.to_datetime(val).date()
    except Exception:
        return None

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ ---
def is_done(cell):
    if not cell:
        return False
    try:
        # –ß–µ—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font_black = False
        if hasattr(cell, 'font') and cell.font:
            if hasattr(cell.font, 'color') and cell.font.color:
                if hasattr(cell.font.color, 'rgb') and cell.font.color.rgb:
                    font_color = str(cell.font.color.rgb).upper()
                    font_black = font_color in ["FF000000", "00000000", "000000", "FF00000000", None]
        
        # –ó–µ–ª–µ–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞
        green_fill = False
        if hasattr(cell, 'fill') and cell.fill:
            if hasattr(cell.fill, 'fill_type') and cell.fill.fill_type is not None:
                if hasattr(cell.fill, 'fgColor') and cell.fill.fgColor:
                    if hasattr(cell.fill.fgColor, 'rgb') and cell.fill.fgColor.rgb:
                        fill_color = str(cell.fill.fgColor.rgb).upper()
                        green_fill = (
                            fill_color.startswith("FF00") or 
                            fill_color.startswith("00FF") or 
                            fill_color.startswith("0092") or
                            fill_color.startswith("FF92") or
                            "92D050" in fill_color or
                            "00FF00" in fill_color
                        )
        
        return font_black or green_fill
        
    except Exception as e:
        print(f"Error in is_done: {e}")
        return False

# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ requests ---
async def download_file(user_id):
    data = user_data.get(user_id)
    if not data:
        await bot.send_message(user_id, "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return None
        
    file_path = f"user_{user_id}.xlsx"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ - —Å–∫–∞—á–∏–≤–∞–µ–º
    if data.get("link"):
        try:
            print(f"üì• Downloading file from: {data['link']}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –≤–º–µ—Å—Ç–æ aiohttp
            response = requests.get(data["link"], timeout=30)
            if response.status_code == 200:
                with open(file_path, "wb") as f:
                    f.write(response.content)
                user_data[user_id]["path"] = file_path
                print(f"‚úÖ File downloaded successfully: {file_path}")
                return file_path
            else:
                await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status_code}")
                return None
                
        except Exception as e:
            await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return None
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    if data.get("path"):
        if os.path.exists(data["path"]):
            return data["path"]
        else:
            await bot.send_message(user_id, f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {data['path']}")
            return None
    
    await bot.send_message(user_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return None

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Excel ---
async def check_excel(user_id, notify_today=True, week_summary=False):
    print(f"üîç Checking Excel for user {user_id}")
    
    file_path = await download_file(user_id)
    if not file_path:
        return
        
    try:
        wb = load_workbook(file_path, data_only=True)
    except Exception as e:
        await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
        
    sheet_name = "–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
    if sheet_name not in wb.sheetnames:
        await bot.send_message(user_id, f"‚ùå –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    ws = wb[sheet_name]
    today = datetime.date.today()
    overdue_items = []

    headers = [cell.value for cell in ws[1]]
    col_map = {name: idx for idx, name in enumerate(headers) if name}

    days_limit = user_data[user_id].get("days", 30)

    for row_idx, row in enumerate(ws.iter_rows(min_row=2), start=2):
        try:
            obj_cell = row[col_map.get("–û–±—ä–µ–∫—Ç")] if "–û–±—ä–µ–∫—Ç" in col_map else None
            task_cell = row[col_map.get("–°–æ–æ—Ä—É–∂–µ–Ω–∏–µ")] if "–°–æ–æ—Ä—É–∂–µ–Ω–∏–µ" in col_map else None
            resp_cell = row[col_map.get("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π")] if "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π" in col_map else None
            subject_cell = row[col_map.get("–ü—Ä–µ–¥–º–µ—Ç –ø–∏—Å—å–º–∞")] if "–ü—Ä–µ–¥–º–µ—Ç –ø–∏—Å—å–º–∞" in col_map else None
            pg_cell = row[col_map.get("–°—Ä–æ–∫ –æ—Ç –ü–ì")] if "–°—Ä–æ–∫ –æ—Ç –ü–ì" in col_map else None
            cc_cell = row[col_map.get("–ù–∞–ø—Ä–∞–≤–∏–ª –≤ –¶–¶–û")] if "–ù–∞–ø—Ä–∞–≤–∏–ª –≤ –¶–¶–û" in col_map else None

            obj = obj_cell.value if obj_cell else ""
            task = task_cell.value if task_cell else ""
            resp = resp_cell.value if resp_cell else ""
            subject = subject_cell.value if subject_cell else ""

            date_pg = parse_date(pg_cell.value if pg_cell else None)
            date_cc = parse_date(cc_cell.value if cc_cell else None)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if pg_cell and date_pg and date_pg <= today and not is_done(pg_cell):
                overdue_items.append(
                    f"üìç <b>{html.escape(str(obj))}</b>\n"
                    f"üìù {html.escape(str(task))}\n"
                    f"üë§ {html.escape(str(resp))}\n"
                    f"‚úâ {html.escape(str(subject))}\n"
                    f"‚è∞ –°—Ä–æ–∫ –æ—Ç –ü–ì: {html.escape(str(date_pg))}"
                )
                
            if cc_cell and date_cc and (today - date_cc).days >= days_limit and not is_done(cc_cell):
                overdue_items.append(
                    f"üìç <b>{html.escape(str(obj))}</b>\n"
                    f"üìù {html.escape(str(task))}\n"
                    f"üë§ {html.escape(str(resp))}\n"
                    f"‚úâ {html.escape(str(subject))}\n"
                    f"‚è∞ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¶–¶–û: {html.escape(str(date_cc))} ({html.escape(str((today - date_cc).days))} –¥–Ω–µ–π)"
                )
                
        except Exception as e:
            print(f"Error in row {row_idx}: {e}")
            continue

    if overdue_items:
        header = f"‚ö†Ô∏è {len(overdue_items)-1} –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è {today}:\n\n" if notify_today else "üìã –°–≤–æ–¥–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        msg = header + "\n\n".join(overdue_items)
        
        chunks = [msg[i:i+4000] for i in range(0, len(msg), 4000)]
        for chunk in chunks:
            try:
                await bot.send_message(user_id, chunk, parse_mode="HTML")
            except Exception as e:
                print(f"Error sending message: {e}")
                try:
                    clean_chunk = chunk.replace('<b>', '').replace('</b>', '')
                    await bot.send_message(user_id, clean_chunk)
                except Exception as fallback_error:
                    print(f"Fallback error: {fallback_error}")
                    
        print(f"‚úÖ Sent {len(overdue_items)} overdue items to user {user_id}")
    elif week_summary:
        await bot.send_message(user_id, "‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤ —Å—Ä–æ–∫.")
    elif notify_today:
        await bot.send_message(user_id, "‚úÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply(
        "ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Excel-—Ç–∞–±–ª–∏—Ü\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Excel —Ñ–∞–π–ª –∏–ª–∏ —Å–∞–º —Ñ–∞–π–ª.\n"
        "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 9:00 –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º."
    )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    await message.reply("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ PythonAnywhere!")

@dp.message(Command("test"))
async def cmd_test(message: types.Message):
    await message.reply("üîÑ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    await check_excel(message.from_user.id, notify_today=True)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    
    if message.text:
        text = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
        if text.lower().startswith(('http://', 'https://')):
            user_data[user_id] = {"link": text, "days": 30}
            await message.reply("‚úÖ –°—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—É...")
            await check_excel(user_id)
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        elif os.path.exists(text) and text.lower().endswith(('.xlsx', '.xls')):
            user_data[user_id] = {"path": text, "days": 30}
            await message.reply("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—É...")
            await check_excel(user_id)
            return
            
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª, –ø–æ–∫–∞–∂–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            await message.reply(
                "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n\n"
                "‚Ä¢ **–°—Å—ã–ª–∫—É** –Ω–∞ Excel —Ñ–∞–π–ª (http://...)\n"
                "‚Ä¢ –ò–ª–∏ **—Å–∞–º —Ñ–∞–π–ª** –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
                "–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: https://example.com/file.xlsx"
            )
            return
        
    elif message.document and message.document.file_name:
        file_name = message.document.file_name.lower()
        if file_name.endswith(('.xlsx', '.xls')):
            file_path = f"user_{user_id}.xlsx"
            try:
                file = await bot.get_file(message.document.file_id)
                await bot.download_file(file.file_path, destination=file_path)
                user_data[user_id] = {"path": file_path, "days": 30}
                await message.reply("‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—è—é —Ç–∞–±–ª–∏—Ü—É...")
                await check_excel(user_id)
            except Exception as e:
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        else:
            await message.reply("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Excel (.xlsx –∏–ª–∏ .xls)")
        return
        
    await message.reply("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ")

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def daily_check():
    print("üîÑ Running daily check...")
    if not user_data:
        print("‚ùå No users found for daily check")
        return
        
    for user_id in list(user_data.keys()):
        try:
            await check_excel(user_id, notify_today=True)
        except Exception as e:
            print(f"Error in daily check for user {user_id}: {e}")

async def weekly_summary():
    print("üìã Running weekly summary...")
    if not user_data:
        print("‚ùå No users found for weekly summary")
        return
        
    for user_id in list(user_data.keys()):
        try:
            await check_excel(user_id, notify_today=False, week_summary=True)
        except Exception as e:
            print(f"Error in weekly summary for user {user_id}: {e}")

# --- –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Health Checks ---
async def health_check(request):
    return web.Response(text="Bot is running!")

def run_web_server():
    app = web.Application()
    app.router.add_get('/', health_check)
    app.router.add_get('/health', health_check)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (Render —Å–∞–º –Ω–∞–∑–Ω–∞—á–∞–µ—Ç)
    port = int(os.environ.get("PORT", 10000))
    web.run_app(app, host='0.0.0.0', port=port)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
""" async def main():
    print("‚úÖ Bot initialized successfully")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(daily_check, "cron", hour=6, minute=0, timezone="Europe/Moscow")  # 9:00 –ú–°–ö
    scheduler.add_job(weekly_summary, "cron", day_of_week=0, hour=7, minute=0, timezone="Europe/Moscow")  # 10:00 –ú–°–ö –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    scheduler.start()
    
    print("‚è∞ Scheduler started: Daily at 09:00 MSK, Weekly on Sunday at 10:00 MSK")
    print("ü§ñ Bot is ready and polling...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)
 """

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º ---
async def main():
    print("‚úÖ Bot initialized successfully")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(daily_check, "cron", hour=6, minute=0, timezone="Europe/Moscow")
    scheduler.add_job(weekly_summary, "cron", day_of_week=0, hour=7, minute=0, timezone="Europe/Moscow")
    scheduler.start()
    
    print("‚è∞ Scheduler started")
    print("ü§ñ Bot is ready and polling...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
    restart_count = 0
    max_restarts = 10
    
    while restart_count < max_restarts:
        try:
            await dp.start_polling(bot)
        except Exception as e:
            restart_count += 1
            print(f"‚ùå Bot crashed (restart {restart_count}/{max_restarts}): {e}")
            print("üîÑ Restarting in 30 seconds...")
            await asyncio.sleep(30)
    
    print("‚ùå Max restarts reached. Bot stopped.")

if __name__ == "__main__":
   # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Health Checks
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    # –î–ª—è PythonAnywhere - –∑–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    asyncio.run(main())
